{"version":3,"sources":["List.js","Cipher.js","Palindrome.js","Piglat.js","Roman.js","Smallcom.js","Telnum.js","Algorithms.js","App.js","serviceWorker.js","index.js"],"names":["List","props","Cipher","state","str","num","handleChange","bind","event","target","name","this","setState","value","onChange","type","max","min","cipher","alpha","Array","from","alphaRev","i","length","push","decoded","indexOf","Number","Encrypt","React","Component","Palindrome","wordArr","toLowerCase","match","splice","revWord","reverse","wordStr","join","revStr","checkPal","Piglat","concat","firstVow","slice","translate","Roman","convert","numb","char","undefined","repeat","numArr","toString","I","pop","X","C","M","m","c","x","convertToRoman","smallestCommons","arr","workArr","firNum","secNum","smallCom","test","filter","Smallcom","num1","num2","scm","onSub","onClick","Telnum","phone","Algorithms","algo","App","selAlgo","Algos","list","palindrome","pigLat","roman","Primes","telNum","className","slected","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c536dfde.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction List(props) {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>\r\n          <h3>Caesars cipher</h3>\r\n          <p>Give a string of characters, and a number to move them by.</p>\r\n        </li>\r\n        <li>\r\n          <h3>Palindrom checker</h3>\r\n          <p>Give a string of characters and see if it's a palindrome.</p>\r\n        </li>\r\n        <li>\r\n          <h3>Pig Latin</h3>\r\n          <p>Translate a sentence to pig latin.</p>\r\n        </li>\r\n        <li>\r\n          <h3>Roman Numeral Converter</h3>\r\n          <p>Turn an arabic numberal to a roman numberal</p>\r\n        </li>\r\n        <li>\r\n          <h3>Smallest Common Multiple</h3>\r\n          <p>Find the smallest common multiple for all numbers between 2 points</p>\r\n        </li>\r\n        <li>\r\n          <h3>Telephone Number Validator</h3>\r\n          <p>Confirms that a given number is a valid US number</p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\r\n\r\nclass Cipher extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      str: \"\",\r\n      num: 0,\r\n\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n  }\r\n\r\n  handleChange(event) {\r\n    event.target.name === \"str\" ?\r\n      this.setState({str:event.target.value}) :\r\n      this.setState({num:event.target.value});\r\n\r\n  }\r\n  render () {\r\n\r\n    return (\r\n      <div>\r\n        <form>\r\n          <label>\r\n            starting text:\r\n            <textarea\r\n              name=\"str\"\r\n              value={this.state.str}\r\n              onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            how many steps to move it:\r\n            <input\r\n              type=\"number\"\r\n              name=\"num\"\r\n              max=\"26\"\r\n              min=\"-26\"\r\n              value={this.state.num}\r\n              onChange={this.handleChange} />\r\n          </label>\r\n        </form>\r\n        {Encrypt (this.state.str, this.state.num)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction Encrypt(str, cipher) {\r\n  let alpha = Array.from(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\");\r\n  let alphaRev = [];\r\n  for (let i= alpha.length-1; i >= 0; i--) {\r\n    alphaRev.push(alpha[i])\r\n  }\r\n  let decoded = \"\";\r\n  if (cipher < 0){\r\n    for (let i=0; i<str.length; i++){\r\n      if (alpha.indexOf(str[i])<0) {\r\n        decoded += str[i];\r\n      }else{\r\n        decoded += alphaRev[alphaRev.indexOf(str[i])-Number(cipher)];\r\n      }\r\n    }\r\n  }else{\r\n    for (let i=0; i<str.length; i++){\r\n      if (alpha.indexOf(str[i])<0) {\r\n        decoded += str[i];\r\n      }else{\r\n        decoded += alpha[alpha.indexOf(str[i])+Number(cipher)];\r\n      }\r\n    }\r\n  }\r\n  return decoded;\r\n  }\r\n\r\nexport default Cipher;\r\n","import React from 'react'\r\n\r\nclass Palindrome extends React.Component{\r\n  constructor(props){\r\n    super (props);\r\n    this.state = {\r\n      str : \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({str:event.target.value});\r\n  }\r\n\r\n  render () {\r\n    return(\r\n      <div>\r\n        <label>\r\n          enter some text to see if it's a palindrome\r\n          <textarea\r\n            value={this.state.str}\r\n            onChange={this.handleChange} />\r\n        </label>\r\n        <p>{this.state.str!=\"\" ? checkPal(this.state.str): this.state.str}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction checkPal(str) {\r\n  let str2 = str.toLowerCase();\r\n  let wordArr = str2.match(/[a-z 0-9 ]/ig);\r\n  for (let i=0; i<wordArr.length; i++) {\r\n    if (wordArr[i] == \" \") {\r\n      wordArr.splice(i, 1);\r\n    }\r\n  }\r\n  let revWord =   [...wordArr];\r\n  revWord.reverse()\r\n  let wordStr = wordArr.join('');\r\n  let revStr = revWord.join('');\r\n  if (wordStr == revStr){\r\n    return str+\" is a palindrome\";\r\n  }\r\n  else{\r\n    return str+\" is not a palindrome\";\r\n  }\r\n}\r\n\r\nexport default Palindrome;\r\n","import React from 'react';\r\n\r\nclass Piglat extends React.Component {\r\n  constructor(props){\r\n    super (props);\r\n    this.state = {\r\n      str : \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({str:event.target.value});\r\n  }\r\n  render () {\r\n    return(\r\n      <div>\r\n        <label>\r\n          enter some text to get it's pig latin translation\r\n          <textarea\r\n            value={this.state.str}\r\n            onChange={this.handleChange} />\r\n        </label>\r\n        <p>{this.state.str!=\"\" ? translate(this.state.str): this.state.str}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nfunction translate(str) {\r\n  /*make a string of vowels for comparing */\r\n  let vowStr = \"aeiou\";\r\n  /* if the first letter of str is a vowel then just return str with way at the end, in hindsight I couldve lumped this in as one big else if statement with how no vowel words are treated below.  maybe i'll clean that up later*/\r\n  if(vowStr.indexOf(str[0]) >= 0) {\r\n    return str.concat(\"way\");\r\n  }\r\n/*finding the index for the first vowel in the word(or technically the last if you\r\ncount form the end of the word) */\r\n  let firstVow = -1;\r\n  for (let i=str.length; i>=0; i--) {\r\n    if(vowStr.indexOf(str[i]) >= 0)\r\n    firstVow = i;\r\n  }\r\n  /*if there are no vowels then return str with ay at the end. I could've lumped this\r\n  and my the first return for vowel first words together*/\r\n  if (firstVow < 0) {\r\n    return str.concat(\"ay\");\r\n  }\r\n  /*return the first vowel of the string onwards + the first letters before the vowel\r\n  + ay */\r\n  return(str.slice(firstVow)).concat(str.slice(0,firstVow)).concat(\"ay\");\r\n}\r\n\r\nexport default Piglat;\r\n","import React from 'react';\r\n\r\nclass Roman extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      num : 1\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({num: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label>Enter a number to convert to roman numerals:\r\n          <input\r\n            type=\"number\"\r\n            name=\"num\"\r\n            min=\"1\"\r\n            value={this.state.num}\r\n            onChange={this.handleChange} />\r\n        </label>\r\n        <p>{convertToRoman(this.state.num)}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction convertToRoman(num) {\r\n  let convert = function (numb, char) {\r\n   if (numb == undefined){\r\n     return \"\";\r\n   } else if (numb <= 3) {\r\n     return char[0].repeat(numb);\r\n   } else if (numb == 9) {\r\n     return char[0] + char[2];\r\n   } else if (numb == 4) {\r\n     return char[0] + char[1];\r\n   } else {\r\n     return char[1] + char[0].repeat(numb-5);\r\n   }\r\n  }\r\n  let numArr = Array.from(num.toString());\r\n  let I = numArr.pop();\r\n  let arrI = [\"I\", \"V\", \"X\"];\r\n  let X = numArr.pop();\r\n  let arrX = [\"X\", \"L\", \"C\"];\r\n  let C = numArr.pop();\r\n  let arrC = [\"C\", \"D\", \"M\"];\r\n  let M = numArr.join(\"\");\r\n  let m = \"M\".repeat(M);\r\n  let c = convert(C, arrC);\r\n  let x = convert(X, arrX);\r\n  let i = convert(I, arrI);\r\n  return m + c + x + i;\r\n}\r\n\r\nexport default Roman;\r\n","import React from 'react';\r\n\r\nclass Smallcom extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      num1: 0,\r\n      num2: 0,\r\n      scm: 0\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.onSub = this.onSub.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    event.target.name === \"num1\" ?\r\n      this.setState({num1:event.target.value}):\r\n      this.setState({num2:event.target.value});\r\n\r\n  }\r\n  onSub(){\r\n    this.setState({scm: smallestCommons([this.state.num1, this.state.num2])\r\n})\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <label>\r\n          first number:\r\n          <input\r\n            type=\"number\"\r\n            name=\"num1\"\r\n            min=\"1\"\r\n            value={this.state.num1}\r\n            onChange={this.handleChange} />\r\n        </label>\r\n        <label>\r\n          second number:\r\n          <input\r\n            type=\"number\"\r\n            name=\"num2\"\r\n            min=\"1\"\r\n            value={this.state.num2}\r\n            onChange={this.handleChange} />\r\n        </label>\r\n        <button type=\"submit\" onClick={this.onSub}>submit</button>\r\n        <p>{this.state.scm > 0 ? this.state.scm : \"\"}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction smallestCommons(arr) {\r\n  //make workArr equal to arr and all inbetween numbers in order\r\n  let workArr = [];\r\n  let firNum = Number(arr[0]);\r\n  let secNum = Number(arr[1]);\r\n  if (firNum==secNum){\r\n    return ;\r\n  } else if (firNum<secNum) {\r\n    workArr.push(firNum);\r\n    for (let i=1; i<=secNum-firNum; i++) {\r\n      workArr.push(firNum+i);\r\n    }\r\n  } else {\r\n    workArr.push(secNum);\r\n    for (let i=1; i<=firNum-secNum; i++){\r\n      workArr.push(secNum+i);\r\n    }\r\n  }\r\n  /*smallCom is going to hold our final answer, initializing at biggest arg*2\r\n  because that is the smallest possible answer\r\n  test if smallCom is multiple of all numbers in workArr, if so return smallCom\r\n  if not add one to smallCom and try again*/\r\n  let test = [];\r\n  let smallCom;\r\n  for (smallCom=workArr[workArr.length-1]*2; test.length<workArr.length; smallCom++){\r\n    test = workArr.filter(num => smallCom%num == 0)\r\n  }\r\n  /*actually return smallCom-1 because the for loop adds 1 more to it and it's easier to just subtract 1 than to fiddle with it any more*/\r\n  return smallCom-1;\r\n}\r\n\r\nexport default Smallcom;\r\n","import React from  'react';\r\n\r\nclass Telnum extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      phone: \"\"\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(event){\r\n    this.setState({phone:event.target.value});\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n      <label>enter a phone number here:\r\n        <input\r\n          onChange={this.handleChange}\r\n          value={this.state.phone}/>\r\n      </label>\r\n      <br/>{telephoneCheck(this.state.phone)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction telephoneCheck(str) {\r\n return (/^(1\\s?)?(\\(\\d{3}\\)|\\d{3})[\\-\\s]?\\d{3}[\\-\\s]?\\d{4}$/.test(str)? \"valid\" : \"invalid\");\r\n}\r\n\r\nexport default Telnum\r\n","import React from 'react';\r\nimport List from './List.js';\r\nimport Cipher from './Cipher.js';\r\nimport Palindrome from './Palindrome.js'\r\nimport Piglat from './Piglat.js'\r\nimport Roman from './Roman.js'\r\nimport Smallcom from './Smallcom.js'\r\nimport Telnum from './Telnum.js'\r\n\r\n\r\nfunction Algorithms(props){\r\n  switch (props.algo) {\r\n    case \"list\":\r\n      return (\r\n        <List />\r\n      );\r\n      break;\r\n    case \"cipher\":\r\n      return (\r\n        <div>\r\n         <Cipher />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"palindrome\":\r\n      return (\r\n        <div>\r\n          <Palindrome />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"pigLat\":\r\n      return (\r\n        <div>\r\n          <Piglat />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"roman\":\r\n      return (\r\n        <div>\r\n          <Roman />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"smallCom\":\r\n      return (\r\n        <div>\r\n          <Smallcom />\r\n        </div>\r\n      );\r\n      break;\r\n    case \"telNum\":\r\n      return (\r\n        <div>\r\n          <Telnum />\r\n        </div>\r\n      );\r\n      break;\r\n    default :\r\n      return (\r\n        <h1>whoops that wasn't supposed to happen</h1>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Algorithms;\r\n","import React from 'react';\nimport Algorithms from './Algorithms.js'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      algo : <Algorithms algo=\"list\"/>\n    };\n\n    this.selAlgo = this.selAlgo.bind(this);\n  }\n\n  selAlgo(event) {\n    this.setState({algo: event.target.value});\n  }\n\n\n  render () {\n    const Algos = {\n      list: <Algorithms algo=\"list\"/>,\n      cipher: <Algorithms algo=\"cipher\"/>,\n      palindrome: <Algorithms algo=\"palindrome\"/>,\n      pigLat: <Algorithms algo=\"pigLat\"/>,\n      roman: <Algorithms algo=\"roman\"/>,\n      smallCom: <Algorithms algo=\"smallCom\"/>,\n      Primes: <Algorithms algo=\"Primes\"/>,\n      telNum: <Algorithms algo=\"telNum\"/>\n    }\n    return (\n      <div className=\"App\">\n        <form>\n          <select value={this.state.algo} onChange={this.selAlgo}>\n            <option slected=\"true\" value=\"list\">see all</option>\n            <option value=\"cipher\">Caesars Cipher</option>\n            <option value=\"palindrome\">Palindrome checker</option>\n            <option value=\"pigLat\">Pig Latin</option>\n            <option value=\"roman\">Roman Numeral Converter</option>\n            <option value=\"smallCom\">Smallest Common Multiple</option>\n            <option value=\"telNum\">Telephone Number Validator</option>\n          </select>\n        </form>\n        <div className=\"algos\">\n          {Algos[this.state.algo]}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1>please select an algorithm below</h1>\n    <hr />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}